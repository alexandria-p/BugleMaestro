Writing Peak Mods

Using a template:
Start by using the `dotnet new` command to create a new project based off the Peak bepinex `peakmod` template:

e.g. On Windows, open a console,
dotnet new install PEAKModding.BepInExTemplate
dotnet new peakmod --name ModName --guid com.github.YourAccount.ModName --ts-team YourThunderstoreTeam

Check this for latest instructions: https://github.com/PEAKModding/BepInExTemplate

Learn how to use Git (source control), and create a free repository on Github to save your work.

Developing your mod:
1.
- update Peak on Steam to latest version
- open (local mod) working directory root in source control
- open local mod in Visual Studio (needs to be VS cause there is a csproj that we will build to export the mod as a .dll) by double-clicking the .sln file.

2.
CLEARING CACHE
- make sure you don't have another local version of your mod in 

C:\Users\<USER>\AppData\Roaming\r2modmanPlus-local\Peak\cache, or
C:\Users\<USER>\AppData\Roaming\r2modmanPlus-local\Peak\profiles\alexandria-p\BepInEx\plugins

3.
r2Modman
- update all mods
- disable cloud BugleMaestro (or whatever your own mod is)
- enable LOCAL BugleMaestro (or whatever your own mod is)
(if not already imported, go to Settings -> Import local mod -> Select the .dll file (<working directory>/(sometimes "artifacts")/bin/<MOD_NAME>/Debug/com.github.<USER_NAME>.<MOD_NAME>.dll)

4.
- (Download and) open ILSpy (after making sure Peak is updated to latest version on Steam)
- "Open latest files"
File -> Open -> (steam)/steamapps/common/PEAK/PEAK_Data/Managed/Assembly-CSharp.dll

This is how you'll read the decompiled Peak game files.

5.
- Start Modded via r2modman

#More Instructions:

How to Change the version (of local mod) in .csproj
<PropertyGroup>
    <AssemblyName>alexandria-p.BugleMaestro</AssemblyName>
    <Product>BugleMaestro</Product>
    <!-- Change to whatever version you're currently on. -->
    <Version>1.2.0</Version>
</PropertyGroup>


How to Build & Test your mod:
- opened .sln in Visual Studio.
- in Solution View (solution explorer) - NOT folder view.
- Set to DEBUG, on toolbar
- pressed Build&Run
- .dll was exported, though a error message popped up (not important)
- .dll is built to local mod "<working_directory_root>/(sometimes "artifacts")/bin/Debug/netstandard2.1/<your_mod_name>.dll"
- In r2 modman, Settings -> Import Local mod -> choose this .dll file.
- (make sure you clear cache so old versions aren't hanging around).

- Make sure you export the RELEASE version to send to the thunderstore


How to publish to Thunderstore:
- replace .dll file with RELEASE build
- update manifest.json (update version, mod dependencies)
- replace README with new readme from repo
- update CHANGELOG with release notes
- export whole directory to ZIP file [alexandria-p.BugleMaestro v1.2.0]
- login to Thunderstore, open Peak, click Upload at the top bar.
- choose your team (alexandria_p) and community (Peak)
- mods, tools, misc, client-only, host-only, camera mods, bepinex


PACKAGES IN VISUAL STUDIO (csproj)

How to setup bepinex as a package source:
- in VS, open Manage NuGet packages
- open the cog icon (settings)
- "NuGet Package Manager -> Package Sources"
- Add a new Package source, for nuget.org


-if you are missing a reference/a library that isnt resolving but everyone else seems to be using in their mods, it might be a dll from the ContentWarning base game.

reference it in your .csproj:
<Reference Include="Unity.Mathematics">
	<HintPath>$(GameDirectory)\Peak_Data\Managed\Unity.Mathematics.dll</HintPath>
</Reference>

You might also want to reference the game's Assembly files in your .csproj
 <PropertyGroup>
    ........
	<!-- Game file installation (Location on my machine for development) -->
	<PeakGameDirectory>D:\Steam\steamapps\common\PEAK</PeakGameDirectory>
  </PropertyGroup>

<!--Private="false" will stop it from being copied to the output folder during build.-->
<ItemGroup>
	<Reference Include="$(PeakGameDirectory)\PEAK_Data\Managed\Assembly-CSharp.dll" Publicize="true" Private="false">
	</Reference>
</ItemGroup>

LOGS

- BepInEx logs will popup in a console window if you start Peak modded via r2 modman.
If not, then:
Open your bepinex config .cfg or .ini file:
AppData\Roaming\r2modmanPlus-local\PEAK\profiles\alexandria-peak\BepInEx\config\BepInEx.cfg
And set Enabled = true for logging

Logs are stored in AppData/LocalLow/Landfall Games/Peak, there's logs for the two last games you've played once you close the game. 
A way of getting to the folder is by pressing your Windows key, pasting %appdata%\..\LocalLow\Landfall Games\Peak\ and pressing enter/ok.


ICON
I use free online tool Photopea to create my mod icon.


Getting into Modding

I started by joining the Peak modding discord,

Then used Hamunii's template (dotnet new): https://github.com/PEAKModding/BepInExTemplate

I followed details on the Lethal Company modding wiki (in this link I think) on how to decompile the game code using ILSpy

https://discord.com/channels/1224455971057958954/1227764852613709914/1227764852613709914 

I used Visual Studio as my development IDE (free tier)

Feel free to checkout the .csproj file on my mod's github to see how I structured it: (handling the references in the mod's .csproj is probably what confused me the most since I didn't see that documented anywhere)

https://github.com/alexandria-p/BugleMaestro
